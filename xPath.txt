
# We continue studying how to parse XML using R
library("XML")
# We began with a revision of the program from Friday
# I already put the revised version of the program into Friday's notes
# so it does not appear here
# The second example from today is originally selected from:
# http://www.w3schools.com/XPath/xpath_examples.asp
# You can download the XML code from the STAT 598 website
# Just download the file bookexample.xml, download it in the format
# "All Files" if you are using Firefox, and save it to the desktop
# Then you can extract the code as follows:
doc <- xmlInternalTreeParse("~/Desktop/bookexample.xml")
# We use some of the XPath code
# which is discussed in Chapter 6 of the Learning XML book
# First we select all titles of all the books:
xpathSApply(doc, "/bookstore/book/title", xmlValue)
# we can select just the second book's title
xpathSApply(doc, "/bookstore/book[2]/title", xmlValue)
# we can select the price of each book
xpathSApply(doc, "/bookstore/book/price", xmlValue)
# we can modify this so that we get the price in numeric format
xpathSApply(doc, "/bookstore/book/price", function(x) as.numeric(xmlValue(x)) )
# we can get the prices of all books that cost more than 30
xpathSApply(doc, "/bookstore/book[price>30]/price", xmlValue)
# or the prices of all books that cost 30 or more
xpathSApply(doc, "/bookstore/book[price>=30]/price", xmlValue)
# the following looks messy because we are selecting internal
# nodes of the tree instead of a leaf node
# so all of the data gets lumped together in a messy-looking way:
xpathSApply(doc, "/bookstore/book[price>=30]", xmlValue)
# we can get the title of each book that costs 30 or more
xpathSApply(doc, "/bookstore/book[price>=30]/title", xmlValue)
# we can get a node for each book, but as before, these are
# internal nodes, so the result looks somewhat messy
xpathSApply(doc, "/bookstore/book", xmlValue)
# the following gives all of the children of the book nodes:
xpathSApply(doc, "/bookstore/book/child::node()", xmlValue)
# here are the authors of all the books;
# notice that the authors are not separated by their individual books:
xpathSApply(doc, "/bookstore/book/author", xmlValue)
# here are all of the nodes that are found two levels below
# the bookstore node in the XML tree
xpathSApply(doc, "/bookstore/*/*/self::node()", xmlValue)
# here are the children of the book written by J K. Rowling
xpathSApply(doc, "/bookstore/book[author='J K. Rowling']/child::node()", xmlValue)
# here are the nodes of the children of the books 
# that are found before J K. Rowling's book in the list
xpathSApply(doc, "/bookstore/book[author='J K. Rowling']/preceding-sibling::*/child::node()", xmlValue)
# here are the nodes of the children of the books 
# that are found after J K. Rowling's book in the list
xpathSApply(doc, "/bookstore/book[author='J K. Rowling']/following-sibling::*/child::node()", xmlValue)
# here are the nodes of the children of the books 
# that are found after Giada De Laurentiis's book in the list
xpathSApply(doc, "/bookstore/book[author='Giada De Laurentiis']/following-sibling::*/child::node()", xmlValue)
# here are the authors of the books 
# that are found after Giada De Laurentiis's book in the list
xpathSApply(doc, "/bookstore/book[author='Giada De Laurentiis']/following-sibling::*/author", xmlValue)
# here are the authors of the children's books 
# that are found after Giada De Laurentiis's book in the list
xpathSApply(doc, "/bookstore/book[author='Giada De Laurentiis']/following-sibling::*[@category='CHILDREN']/author", xmlValue)
# here are the authors of the WEB books 
# that are found after Giada De Laurentiis's book in the list
xpathSApply(doc, "/bookstore/book[author='Giada De Laurentiis']/following-sibling::*[@category='WEB']/author", xmlValue)
# here are the nodes of the children of the books
# that are written by J K. Rowling
xpathSApply(doc, "/bookstore/book[author='J K. Rowling']/child::node()", xmlValue)
# here are the nodes of the children of the books
# that are note written by J K. Rowling
xpathSApply(doc, "/bookstore/book[not(author='J K. Rowling')]/child::node()", xmlValue)
# here are the nodes of the children of the 3rd book
xpathSApply(doc, "/bookstore/book[3]/child::node()", xmlValue)
# here are the nodes of the children for all books except the third book
xpathSApply(doc, "/bookstore/book[position()!=3]/child::node()", xmlValue)
# here are the node of the children for all books that are WEB books
xpathSApply(doc, "/bookstore/book[@category='WEB']/child::node()", xmlValue)
